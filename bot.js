require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const token = process.env.TELEGRAM_BOT_TOKEN;
const adminChatId = process.env.TELEGRAM_CHAT_ID;

const bot = new TelegramBot(token);

const users = {};

const LANGS = [
  { code: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { code: 'en', label: 'English' }
];

const SERVICES = {
  ru: ['–¢–∞—Ç—É–∏—Ä–æ–≤–∫–∞', '–ü–∏—Ä—Å–∏–Ω–≥', '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –º–∞–∫–∏—è–∂'],
  en: ['Tattoo', 'Piercing', 'Permanent makeup']
};

const CITIES = {
  ru: ['–î—É–±–ª–∏–Ω', '–ö–æ—Ä–∫', '–ì–æ–ª—É—ç–π', '–õ–∏–º–µ—Ä–∏–∫', '–î—Ä—É–≥–æ–µ'],
  en: ['Dublin', 'Cork', 'Galway', 'Limerick', 'Other']
};

const FAQ = {
  ru: [
    { q: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–∞—Ç—É–∏—Ä–æ–≤–∫–∞/–ø–∏—Ä—Å–∏–Ω–≥/–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç?', a: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞, —Å—Ç–∏–ª—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã. –¢–æ—á–Ω—É—é —Ü–µ–Ω—É Kris —Å–º–æ–∂–µ—Ç –Ω–∞–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –∏–¥–µ–∏ –∏ –¥–µ—Ç–∞–ª–µ–π.' },
    { q: '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—É–¥–∏—è?', a: 'Kris —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ò—Ä–ª–∞–Ω–¥–∏–∏, —á–∞—â–µ –≤—Å–µ–≥–æ –≤ –î—É–±–ª–∏–Ω–µ. –¢–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ –∏ –¥–∞—Ç—É —É—Ç–æ—á–Ω—è–π—Ç–µ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.' },
    { q: '–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ?', a: '–ü–µ—Ä–µ–¥ –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –≤–∞–∂–Ω–æ —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞—Ç—å—Å—è, –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∞–ª–∫–æ–≥–æ–ª—å –∏ –∫–æ—Ñ–µ, —Ö–æ—Ä–æ—à–æ –ø–æ–µ—Å—Ç—å. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ Kris —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –ª–∏—á–Ω–æ.' },
    { q: '–ö–∞–∫–æ–π —É—Ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã?', a: '–ü–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–∂–∏–≤–ª—è—é—â—É—é –ø–ª—ë–Ω–∫—É.' },
    { q: '–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å Kris?', a: '–°–≤—è–∑–∞—Ç—å—Å—è —Å Kris –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ Telegram, WhatsApp, Instagram –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–æ–Ω—Ç–∞–∫—Ç—ã".' },
    { q: '–ö–∞–∫–∏–µ —Å—Ç–∏–ª–∏ —Ç–∞—Ç—É –≤—ã –¥–µ–ª–∞–µ—Ç–µ?', a: 'Kris —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ç–∏–ª—è—Ö AQUA, COVER UP, LINE, MINI –∏ –¥—Ä—É–≥–∏—Ö. –ú–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.' },
    { q: '–ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É?', a: '–î–∞, –º–æ–∂–Ω–æ! Kris –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—É—é –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—É—é —Ç–∞—Ç—É–∏—Ä–æ–≤–∫—É.' },
    { q: '–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?', a: '–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ Kris –≤ Telegram –∏–ª–∏ WhatsApp, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏.' }
  ],
  en: [
    { q: 'How much does a tattoo/piercing/permanent makeup cost?', a: 'The price depends on the size, style, and complexity. Kris will give you an exact quote after discussing your idea and details.' },
    { q: 'Where is the studio located?', a: 'Kris works in Ireland, mostly in Dublin. Exact place and date are clarified when booking.' },
    { q: 'How to prepare for the procedure?', a: 'Before the procedure, get a good night‚Äôs sleep, avoid alcohol and coffee, and have a good meal. Kris will give you all the details personally.' },
    { q: 'How to care after the procedure?', a: 'After the procedure, you will receive detailed aftercare instructions and a special healing film.' },
    { q: 'How to contact Kris?', a: 'You can contact Kris via Telegram, WhatsApp, Instagram, or phone. All contacts are available in the "Contacts" section.' },
    { q: 'What tattoo styles do you do?', a: 'Kris works in AQUA, COVER UP, LINE, MINI, and other styles. You can discuss your individual project.' },
    { q: 'Can you cover up an old tattoo?', a: 'Yes, you can! Kris professionally covers up old or unsuccessful tattoos.' },
    { q: 'How to book a consultation?', a: 'To book a consultation, just write to Kris in Telegram or WhatsApp, or use this bot to book.' }
  ]
};

const CONTACTS = {
  ru: `–ö–æ–Ω—Ç–∞–∫—Ç—ã Kris:
Telegram: @mimimitattoo
WhatsApp UA: https://wa.me/380965157890
WhatsApp IRL: https://wa.me/353877167933
Instagram: https://www.instagram.com/mimimitattoo
Facebook: https://www.facebook.com/share/16r3PEdLeh/?mibextid=wwXIfr
Email: nika889list.ru@gmail.com
–¢–µ–ª–µ—Ñ–æ–Ω—ã: +380 96 515 78 90 (UA), +353 87 716 79 33 (IRL)`,
  en: `Kris's contacts:
Telegram: @mimimitattoo
WhatsApp UA: https://wa.me/380965157890
WhatsApp IRL: https://wa.me/353877167933
Instagram: https://www.instagram.com/mimimitattoo
Facebook: https://www.facebook.com/share/16r3PEdLeh/?mibextid=wwXIfr
Email: nika889list.ru@gmail.com
Phones: +380 96 515 78 90 (UA), +353 87 716 79 33 (IRL)`
};

async function sendMessageToClient(chatId, text, options = {}, source, ioInstance) {
  if (source === 'web') {
    if (ioInstance) {
      ioInstance.to(chatId).emit('botMessage', {
        text: text,
        buttons: options.reply_markup ? options.reply_markup.inline_keyboard : []
      });
    } else {
      console.error('Socket.IO instance not provided for web message'); // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å—á–µ–∑–Ω—É—Ç—å
    }
  } else {
    try {
      await bot.sendMessage(chatId, text, options);
    } catch (error) {
      console.error(`Error sending message to Telegram chat ${chatId}:`, error);
    }
  }
}

async function editMessageToClient(chatId, messageId, text, options = {}, source, ioInstance) {
  if (source === 'web') {
    if (ioInstance) {
      ioInstance.to(chatId).emit('botMessage', {
        text: text,
        buttons: options.reply_markup ? options.reply_markup.inline_keyboard : []
      });
      ioInstance.to(chatId).emit('clearLastButtons'); // –ö–æ–º–∞–Ω–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    } else {
      console.error('Socket.IO instance not provided for web message edit'); // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å—á–µ–∑–Ω—É—Ç—å
    }
  } else {
    try {
      await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, ...options });
    } catch (error) {
      console.error(`Error editing message in Telegram chat ${chatId}:`, error);
    }
  }
}

async function answerCallbackQueryClient(queryId, options = {}, source, ioInstance) {
  if (source === 'web') {
    if (options.show_alert && ioInstance && options.chat_id) {
        ioInstance.to(options.chat_id).emit('showAlert', { text: options.text });
    }
  } else {
    try {
      await bot.answerCallbackQuery(queryId, options);
    } catch (error) {
      console.error(`Error answering callback query ${queryId}:`, error);
    }
  }
}

async function deleteMessageClient(chatId, messageId, source, ioInstance) {
  if (source === 'web') {
    if (ioInstance) {
      ioInstance.to(chatId).emit('clearLastButtons'); // –ö–æ–º–∞–Ω–¥–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    }
  } else {
    try {
      await bot.deleteMessage(chatId, messageId);
    } catch (error) {
      console.error(`Error deleting message in Telegram chat ${chatId}:`, error);
    }
  }
}

function mainMenu(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return {reply_markup:{inline_keyboard:[[{text:lang==='ru'?'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ Kris':'üìù Book an appointment',callback_data:'book'}],[{text:lang==='ru'?'‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã':'‚ùì FAQ',callback_data:'faq'}],[{text:lang==='ru'?'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':'üìû Contacts',callback_data:'contacts'}],[{text:lang==='ru'?'üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫':'üåê Change language',callback_data:'lang'}]]}};}
function langMenu() { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return {reply_markup:{inline_keyboard:[[{text:'–†—É—Å—Å–∫–∏–π',callback_data:'setlang_ru'},{text:'English',callback_data:'setlang_en'}]]}};}
function servicesMenu(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return {reply_markup:{inline_keyboard:SERVICES[lang].map((s,i)=>([{text:s,callback_data:`service_${i}`}])) .concat([[{text:lang==='ru'?'‚¨ÖÔ∏è –ù–∞–∑–∞–¥':'‚¨ÖÔ∏è Back',callback_data:'menu'}]])}};}
function citiesMenu(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return {reply_markup:{inline_keyboard:CITIES[lang].map((c,i)=>([{text:c,callback_data:`city_${i}`}])) .concat([[{text:lang==='ru'?'‚¨ÖÔ∏è –ù–∞–∑–∞–¥':'‚¨ÖÔ∏è Back',callback_data:'service'}]])}};}
function faqMenu(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return {reply_markup:{inline_keyboard:FAQ[lang].map((f,i)=>([{text:f.q,callback_data:`faq_${i}`}])) .concat([[{text:lang==='ru'?'‚¨ÖÔ∏è –ù–∞–∑–∞–¥':'‚¨ÖÔ∏è Back',callback_data:'menu'}]])}};}
function getGreeting(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return lang==='ru'?'–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø ‚Äî –±–æ—Ç —Å–∞–π—Ç–∞ MIMIMI TATTOO. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ Kris –Ω–∞ —Ç–∞—Ç—É, –ø–∏—Ä—Å–∏–Ω–≥ –∏–ª–∏ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:':'Hello! üëã\nI‚Äôm the MIMIMI TATTOO website bot. Here you can book an appointment with Kris for a tattoo, piercing, or permanent makeup, and get answers to common questions.\n\nPlease choose an option:';}
function getFarewell(lang) { /* ... (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... */ return lang==='ru'?'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ MIMIMI TATTOO. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üå∏':'Thank you for choosing MIMIMI TATTOO. If you need more help, just write here ‚Äî I‚Äôm always in touch! Have a great day! üå∏';}

function resetUser(chatId) {
  users[chatId] = { lang: users[chatId]?.lang || 'ru', step: 'menu' };
}

// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
async function processMessage(updateData, ioInstance) { // ioInstance —Ç–µ–ø–µ—Ä—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
  let chatId, text, data, source, queryId, messageId, message;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  if (updateData.source === 'web') {
    source = 'web';
    chatId = updateData.chatId;
    text = updateData.text;
    data = updateData.data;
    message = { chat: { id: chatId }, message_id: 'web_msg_' + Date.now() }; // Mock message object
  } else { // Telegram update
    source = 'telegram';
    if (updateData.message) {
      message = updateData.message;
      chatId = message.chat.id;
      text = message.text;
    } else if (updateData.callback_query) {
      message = updateData.callback_query.message;
      chatId = message.chat.id;
      data = updateData.callback_query.data;
      queryId = updateData.callback_query.id;
      text = null;
    } else {
      console.warn('Unknown update type from Telegram:', updateData);
      return;
    }
  }

  users[chatId] = users[chatId] || { lang: 'ru', step: 'menu' };
  const lang = users[chatId].lang;
  const currentStep = users[chatId].step;

  try {
    if (data) {
      if (data === 'lang') {
        users[chatId].step = 'lang';
        return await editMessageToClient(chatId, message.message_id, lang === 'ru' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:' : 'Please choose your language:', langMenu(), source, ioInstance);
      }
      if (data.startsWith('setlang_')) {
        const newLang = data.split('_')[1];
        users[chatId].lang = newLang;
        resetUser(chatId);
        return await editMessageToClient(chatId, message.message_id, getGreeting(newLang), mainMenu(newLang), source, ioInstance);
      }
      if (data === 'menu') {
        resetUser(chatId);
        return await editMessageToClient(chatId, message.message_id, getGreeting(lang), mainMenu(lang), source, ioInstance);
      }
      if (data === 'book') {
        users[chatId].step = 'service';
        return await editMessageToClient(chatId, message.message_id, lang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:' : 'Choose a service:', servicesMenu(lang), source, ioInstance);
      }
      if (data.startsWith('service_')) {
        const idx = Number(data.split('_')[1]);
        users[chatId].service = SERVICES[lang][idx];
        users[chatId].step = 'name';
        if (source === 'web') {
            await sendMessageToClient(chatId, lang === 'ru' ? '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?' : 'What is your name?', {}, source, ioInstance);
        } else {
            await deleteMessageClient(chatId, message.message_id, source, ioInstance);
            await sendMessageToClient(chatId, lang === 'ru' ? '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?' : 'What is your name?', {}, source, ioInstance);
        }
        return;
      }
      if (data === 'faq') {
        users[chatId].step = 'faq_list';
        return await editMessageToClient(chatId, message.message_id, lang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:' : 'Choose a question:', faqMenu(lang), source, ioInstance);
      }
      if (data.startsWith('faq_')) {
        const idx = Number(data.split('_')[1]);
        const answer = FAQ[lang][idx].a;
        if (source === 'telegram') {
            if (answer.length < 180) {
                await answerCallbackQueryClient(queryId, { text: answer, show_alert: true }, source);
            } else {
                await answerCallbackQueryClient(queryId, {}, source);
                await sendMessageToClient(chatId, answer, {}, source);
            }
        } else if (source === 'web') {
            await sendMessageToClient(chatId, answer, {}, source, ioInstance);
            // –ï—Å–ª–∏ show_alert –±—ã–ª–æ –±—ã true, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
            if (FAQ[lang][idx].a.length < 180) {
                ioInstance.to(chatId).emit('showAlert', { text: answer, chat_id: chatId }); // –ü–µ—Ä–µ–¥–∞–µ–º chat_id –¥–ª—è showAlert
            }
        }
        return;
      }
      if (data === 'contacts') {
        return await editMessageToClient(chatId, message.message_id, CONTACTS[lang], mainMenu(lang), source, ioInstance);
      }
      if (data.startsWith('city_')) {
        const idx = Number(data.split('_')[1]);
        if (CITIES[lang][idx] === (lang === 'ru' ? '–î—Ä—É–≥–æ–µ' : 'Other')) {
          users[chatId].step = 'city_other';
          await deleteMessageClient(chatId, message.message_id, source, ioInstance);
          return await sendMessageToClient(chatId, lang === 'ru' ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:' : 'Please type the city where you want to book:', {}, source, ioInstance);
        } else {
          users[chatId].city = CITIES[lang][idx];
          users[chatId].step = 'date';
          await deleteMessageClient(chatId, message.message_id, source, ioInstance);
          return await sendMessageToClient(chatId, lang === 'ru'
            ? '–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è)'
            : 'When would you like to come? (Please write date and time or your wishes)', {}, source, ioInstance);
        }
      }
    }

    if (text) {
        if (text === '/start' || text === '/menu') {
            resetUser(chatId);
            return await sendMessageToClient(chatId, getGreeting(lang), mainMenu(lang), source, ioInstance);
        }
        if (currentStep === 'name') {
            users[chatId].name = text;
            users[chatId].step = 'phone';
            return await sendMessageToClient(chatId, lang === 'ru' ? '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?' : 'Your phone number?', {}, source, ioInstance);
        }
        if (currentStep === 'phone') {
            users[chatId].phone = text;
            users[chatId].step = 'city';
            return await sendMessageToClient(chatId, lang === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:' : 'Choose a city:', citiesMenu(lang), source, ioInstance);
        }
        if (currentStep === 'city_other') {
            users[chatId].city = text;
            users[chatId].step = 'date';
            return await sendMessageToClient(chatId, lang === 'ru'
                ? '–ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–∏–π—Ç–∏? (–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è)'
                : 'When would you like to come? (Please write date and time or your wishes)', {}, source, ioInstance);
        }
        if (currentStep === 'date') {
            users[chatId].date = text;
            users[chatId].step = 'menu';
            
            const notify =
                (lang === 'ru' ? '‚ú® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n' : '‚ú® New request!\n') +
                (lang === 'ru' ? '–ò—Å—Ç–æ—á–Ω–∏–∫' : 'Source') + `: ${source}\n` +
                (lang === 'ru' ? '–£—Å–ª—É–≥–∞' : 'Service') + `: ${users[chatId].service}\n` +
                (lang === 'ru' ? '–ò–º—è' : 'Name') + `: ${users[chatId].name}\n` +
                (lang === 'ru' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : 'Phone') + `: ${users[chatId].phone}\n` +
                (lang === 'ru' ? '–ì–æ—Ä–æ–¥' : 'City') + `: ${users[chatId].city}\n` +
                (lang === 'ru' ? '–î–∞—Ç–∞/–≤—Ä–µ–º—è' : 'Date/Time') + `: ${users[chatId].date}`;

            try {
                await bot.sendMessage(adminChatId, notify);
            } catch (err) {
                console.error('sendMessage to admin error:', err);
            }

            return await sendMessageToClient(chatId,
                (lang === 'ru'
                    ? '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É! Kris —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –í–∞–∂–Ω–æ: –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞.\n\n'
                    : 'Thank you for your request! Kris will contact you to confirm the details. Note: a prepayment is required to confirm your booking.\n\n'
                ) + getFarewell(lang),
                mainMenu(lang),
                source,
                ioInstance
            );
        }
    }
  } catch (err) {
    console.error('processMessage error:', err);
    await sendMessageToClient(chatId, lang === 'ru' ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ Kris –Ω–∞–ø—Ä—è–º—É—é.' : 'Sorry, an error occurred. Please try again or contact Kris directly.', {}, source, ioInstance);
    resetUser(chatId);
  }
}

// –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–ò
module.exports = {
  handleTelegramUpdate: async (updateBody, ioInstance) => { // –ü—Ä–∏–Ω–∏–º–∞–µ–º ioInstance
    let updateData;
    if (updateBody.message) {
        updateData = { ...updateBody.message, source: 'telegram' };
    } else if (updateBody.callback_query) {
        updateData = { ...updateBody.callback_query, message: updateBody.callback_query.message, data: updateBody.callback_query.data, queryId: updateBody.callback_query.id, source: 'telegram' };
    } else {
        console.warn('Unknown update type from Telegram:', updateBody);
        return;
    }
    await processMessage(updateData, ioInstance); // –ü–µ—Ä–µ–¥–∞–µ–º ioInstance
  },
  processMessage: processMessage
};